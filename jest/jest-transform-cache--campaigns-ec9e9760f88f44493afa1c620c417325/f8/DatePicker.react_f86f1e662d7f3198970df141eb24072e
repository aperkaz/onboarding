'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default = undefined;var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _class, _temp;var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);
require('./bootstrap-datepicker');
require('./bootstrap-datepicker-i18n');

var _jquery = require('jquery');var _jquery2 = _interopRequireDefault(_jquery);
var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _reactDom = require('react-dom');var _reactDom2 = _interopRequireDefault(_reactDom);
require('./date-picker.css');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

DatePicker = (_temp = _class = function (_React$Component) {_inherits(DatePicker, _React$Component);






















  function DatePicker(props) {_classCallCheck(this, DatePicker);var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this,
    props));

    _this.locale = props.locale || 'en';

    var format = props.format || 'dd/MM/yyyy';

    // normalize format from Java to bootstrap-datepicker
    _this.format = format.replace(/M{2}/g, 'mm').replace('mmmm', 'MM');

    _this.options = props.options || {};return _this;
  }_createClass(DatePicker, [{ key: 'componentDidMount', value: function componentDidMount()

    {
      var input = _reactDom2.default.findDOMNode(this.refs.input);
      this.dateElement = input;
      if (this.props.showIcon) {
        this.dateElement = this.refs.group;
      }

      var datePicker = (0, _jquery2.default)(this.dateElement).datepicker(
      this.prepareOptions()).
      on('changeDate', function () {
        // fire event to change date
        var event = document.createEvent('Event');
        event.initEvent('input', true, true);
        input.dispatchEvent(event);
      });
      // options can be an empty object, see the JcDate
      if (this.props.options.events !== undefined) {
        this.props.options.events.map(function (event) {return datePicker.on(event.name, event.fn);});
      }
    } }, { key: 'componentWillUnmount', value: function componentWillUnmount()

    {
      (0, _jquery2.default)(this.dateElement).datepicker('remove');
    } }, { key: 'prepareOptions', value: function prepareOptions()

    {
      var defaultOptions = {
        autoclose: true,
        todayHighlight: true,
        todayBtn: 'linked',
        language: this.locale,
        format: this.format,
        forceParse: false,
        showAnim: 'fold',
        showButtonPanel: true,
        clearBtn: true,
        disabled: this.props.disabled,
        container: this.props.containerSelector };


      return _extends({},
      defaultOptions,
      this.options);

    } }, { key: 'render', value: function render()

    {
      var inputProps = _lodash2.default.omit(this.props, ['showIcon', 'containerSelector', 'options', 'blur', 'locale']);
      var element = _react2.default.createElement('input', _extends({}, inputProps, { onBlur: this.props.onBlur, ref: 'input' }));
      if (this.props.showIcon && !this.props.disabled) {
        return (
          _react2.default.createElement('div', { className: 'input-group date', ref: 'group' },
            element,
            _react2.default.createElement('span', { className: 'input-group-addon', ref: 'toggleBtn' },
              _react2.default.createElement('span', { className: 'glyphicon glyphicon-calendar' }))));



      } else {
        return element;
      }
    } }]);return DatePicker;}(_react2.default.Component), _class.propTypes = { showIcon: _react2.default.PropTypes.bool, containerSelector: _react2.default.PropTypes.string, // Possible options: https://bootstrap-datepicker.readthedocs.io/en/latest/options.html
  // additionally you can receive 'events' [{ name: 'hide', fn: () => {} }, ...]
  // Possible events: https://bootstrap-datepicker.readthedocs.io/en/latest/events.html
  options: _react2.default.PropTypes.object, locale: _react2.default.PropTypes.string, format: _react2.default.PropTypes.string, disabled: _react2.default.PropTypes.bool, onBlur: _react2.default.PropTypes.func }, _class.defaultProps = { showIcon: true, containerSelector: 'body', options: { events: [] }, onBlur: _lodash2.default.noop }, _temp);exports.default = DatePicker;