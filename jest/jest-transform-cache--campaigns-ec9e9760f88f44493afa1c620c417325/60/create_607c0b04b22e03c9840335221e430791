'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.











createCampaign = createCampaign;var _superagentBluebirdPromise = require('superagent-bluebird-promise');var _superagentBluebirdPromise2 = _interopRequireDefault(_superagentBluebirdPromise);var _bluebird = require('bluebird');var _bluebird2 = _interopRequireDefault(_bluebird);var _reduxForm = require('redux-form');var _campaigns = require('../../constants/campaigns');var _forms = require('../../constants/forms');var _notification = require('../notification');var _utils = require('./utils');var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var createFormValueSelector = (0, _reduxForm.formValueSelector)(_forms.CREATE_CAMPAIGN_FORM);function createCampaign(router) {
  return function (dispatch, getState) {
    return _bluebird2.default.resolve(
    dispatch({
      type: _campaigns.CAMPAIGN_CREATE_START })).

    then(function () {
      return _superagentBluebirdPromise2.default.post(_lodash2.default.find(getState().serviceRegistry, {
        currentApplication: true }).
      location + '/api/campaigns').set(
      'Accept', 'application/json').
      send(
      (0, _utils.prepareParams)(createFormValueSelector.apply(undefined, [
      getState()].concat(_toConsumableArray(_campaigns.CAMPAIGN_FIELDS))))).


      then(function (response) {
        console.log('----responseSSSS----', response);
        var createdCampaign = response.body;
        return _bluebird2.default.resolve(
        dispatch((0, _notification.showNotification)('campaignEditor.message.success.createCampaign', 'success'))).
        then(function () {
          dispatch({
            type: _campaigns.CAMPAIGN_CREATE_SUCCESS,
            newCampaign: createdCampaign });

          router.push('/campaigns/edit/' + createdCampaign.campaignId + '/template/email');
        });
      }).catch(function (response) {
        console.log('----responseFFFF----', response);
        return _bluebird2.default.resolve(
        dispatch((0, _notification.showNotification)('campaignEditor.message.error.createCampaign', 'error', 10))).
        then(function () {
          dispatch({
            type: _campaigns.CAMPAIGN_CREATE_ERROR,
            error: response.body });

        });
      }).finally(function () {
        // removing all notifications or they will be left in 'notification queue'
        dispatch((0, _notification.removeNotification)());
      });
    });
  };
}