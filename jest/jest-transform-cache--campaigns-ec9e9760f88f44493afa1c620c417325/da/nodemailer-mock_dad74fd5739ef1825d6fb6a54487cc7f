'use strict';

var debug = require('debug')('nodemailer-mock');
var nodemailer = require('nodemailer');
var messages = require('./lib/messages');

// this mocks the functionality of nodemailer
var NodemailerMock = function NodemailerMock() {
  // the real nodemailer transport
  var transport = null;
  var _mockedVerify = true;
  // our response messages
  var _successResponse = messages.success_response;
  var _failResponse = messages.fail_response;
  // Sent mail cache
  var _sentMail = [];
  // Should the callback be a success or failure?
  var _shouldFail = false;
  var _shouldFailOnce = false;

  // Determine if the test should return success or failure
  var determineResponseSuccess = function determineResponseSuccess() {
    return new Promise(function (resolve, reject) {
      // determine if we want to return an error
      if (_shouldFail) {
        // if this is a one time failure, reset the status
        if (_shouldFailOnce) {
          _shouldFail = _shouldFailOnce = false;
        }
        return reject();
      }
      return resolve();
    });
  };

  var createTransport = function createTransport(options) {
    // indicate that we are creating a transport
    debug('createTransport', options);

    transport = nodemailer.createTransport(options);

    return {
      // this will mock the nodemailer.transport.sendMail()
      sendMail: function sendMail(email, callback) {
        // indicate that sendMail() has been called
        debug('transport.sendMail', email);
        // start with a basic info object
        var info = messages.info;
        determineResponseSuccess().
        then(function () {
          // Resolve/Success
          // add the email to our cache
          _sentMail.push(email);
          // update the response
          info.response = _successResponse;
          // indicate that we are sending success
          debug('transport.sendMail', 'SUCCESS', info);
          // return success
          return callback(null, info);
        }).
        catch(function () {
          // Reject/Failure
          // update the response
          info.response = _failResponse;
          // indicate that we are sending an error
          debug('transport.sendMail', 'FAIL', _failResponse, info);
          // return the error
          return callback(_failResponse, info);
        });
      },

      verify: function verify(callback) {
        // should we mock the verify request?
        if (_mockedVerify) {
          return determineResponseSuccess().
          then(function () {return callback(null, _successResponse);}).
          catch(function () {return callback(_failResponse);});
        }
        // use the real nodemailer transport to verify
        return transport.verify(callback);
      },
      // the options this transport was created with
      mock: {
        options: options } };


  };

  return {
    // Our mocked transport
    createTransport: createTransport,
    // Test helper methods
    mock: {
      /**
             * determine if sendMail() should return errors once then succeed
             * @return void
             */
      shouldFailOnce: function shouldFailOnce() {
        _shouldFail = _shouldFailOnce = true;
      },

      /**
          * determine if sendMail() should return errors
          * @param  boolean true will return errors, false will return successes
          * @return void
          */
      shouldFail: function shouldFail(isFail) {
        _shouldFail = isFail;
      },

      /**
          * determine if transport.verify() should be mocked or not
          * @param  {Boolean} isMocked if the function should be mocked
          * @return void
          */
      mockedVerify: function mockedVerify(isMocked) {
        _mockedVerify = isMocked;
      },

      /**
          * set the response messages for successes
          * @param  String|Object response
          * @return void
          */
      successResponse: function successResponse(response) {
        _successResponse = response;
      },

      /**
          * set the response messages for failures
          * @param  String|Object response
          * @return void
          */
      failResponse: function failResponse(response) {
        _failResponse = response;
      },

      /**
          * get an array of sent emails
          * @return Object[] an array of emails
          */
      sentMail: function sentMail() {return _sentMail;},

      /**
                                                          * reset mock values to defaults
                                                          * @return void
                                                          */
      reset: function reset() {
        _sentMail = [];
        _shouldFail = _shouldFailOnce = false;
        _successResponse = messages.success_response;
        _failResponse = messages.fail_response;
      } } };


}();

module.exports = NodemailerMock;