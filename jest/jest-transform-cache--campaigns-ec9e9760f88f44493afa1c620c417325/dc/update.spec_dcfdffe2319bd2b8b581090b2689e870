'use strict';

var _campaigns = require('../../../client/constants/campaigns');


var _notification = require('../../../client/actions/notification');
var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);
var _reduxMockStore = require('redux-mock-store');var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);
var _reduxThunk = require('redux-thunk');var _reduxThunk2 = _interopRequireDefault(_reduxThunk);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} //import * as actions from '../../../client/actions/campaigns/create';
var actions = require('../../../client/actions/campaigns/update');var middlewares = [_reduxThunk2.default];
var mockStore = (0, _reduxMockStore2.default)(middlewares);


var mockResponse = function mockResponse(status, statusText, response) {
  return new window.Response(response, {
    status: status,
    statusText: statusText,
    headers: {
      'Content-type': 'application/json' } });


};
var store = mockStore({
  serviceRegistry: [{
    currentApplication: true,
    location: "127.0.0.1:8080/campaigns",
    name: "campaigns" }] });



it('calls request and success actions if the fetch response was successful', function () {
  window.fetch = jest.fn().mockImplementation(function () {return (
      Promise.resolve(mockResponse(200, null, '{"campaignId":"ff"}')));});

  return store.dispatch(actions.updateCampaign('ff')).
  then(function () {
    var expectedActions = store.getActions();
    expect(expectedActions.length).toBe(4);
    expect(expectedActions[0]).toEqual({ type: _campaigns.CAMPAIGN_UPDATE_START });
    expect(expectedActions[1].type).toEqual('SHOW_NOTIFICATION');
    expect(expectedActions[3]).toEqual({ type: 'REMOVE_NOTIFICATION' });
  });
});

it('calls request and failure actions if the fetch response was not successful', function () {

  window.fetch = jest.fn().mockImplementation(function () {return Promise.resolve(mockResponse(
    400, 'Test Error', '{"status":400, "statusText": Test Error!}'));});

  return store.dispatch(actions.updateCampaign('ff')).
  then(function () {
    var expectedActions = store.getActions();
    console.log('-----expectedActionsError------', expectedActions);
    expect(expectedActions.length).toBe(8);
    expect(expectedActions[0]).toEqual({ type: _campaigns.CAMPAIGN_UPDATE_START });
    expect(expectedActions[6].type).toEqual(_campaigns.CAMPAIGN_UPDATE_ERROR);
    expect(expectedActions[7]).toEqual({ type: 'REMOVE_NOTIFICATION' });
  });
});