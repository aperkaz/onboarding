'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _reduxForm = require('redux-form');
var _forms = require('../../constants/forms');
var _ReduxFormDateRange = require('../common/ReduxFormDateRange.react');var _ReduxFormDateRange2 = _interopRequireDefault(_ReduxFormDateRange);
var _reactIntl = require('react-intl');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// this function should be defined outside of CampaignSearchForm to avoid re-rendering
var renderTextInput = function renderTextInput(field) {
  return (
    _react2.default.createElement('div', { className: 'form-group' },
      _react2.default.createElement('label', { className: 'col-sm-3 control-label', htmlFor: field.name }, field.label),
      _react2.default.createElement('div', { className: 'col-sm-1 text-right' }),
      _react2.default.createElement('div', { className: 'col-sm-8' },
        _react2.default.createElement('input', _extends({}, field.input, { className: 'form-control', name: field.name, type: 'text' })))));



};

var CampaignSearchForm = function CampaignSearchForm(_ref) {var onSearch = _ref.onSearch,onCreate = _ref.onCreate,reset = _ref.reset,intl = _ref.intl;
  var renderActionToolbar = function renderActionToolbar() {
    return (
      _react2.default.createElement('div', { className: 'form-submit text-right' },
        _react2.default.createElement('div', { className: 'form-inline' },
          _react2.default.createElement('button', { className: 'btn btn-link', type: 'button',
              onClick: function onClick() {return reset(_forms.SEARCH_CAMPAIGN_FORM);} },

            intl.formatMessage({ id: 'campaignEditor.searchForm.button.reset' })),

          _react2.default.createElement('button', { className: 'btn btn-default', type: 'button', onClick: onCreate },
            intl.formatMessage({ id: 'campaignEditor.searchForm.button.create' })),

          _react2.default.createElement('button', { className: 'btn btn-primary', type: 'button', onClick: onSearch },
            intl.formatMessage({ id: 'campaignEditor.searchForm.button.search' })))));




  };

  return (
    _react2.default.createElement('div', { className: 'form-horizontal' },
      _react2.default.createElement('h1', null,
        intl.formatMessage({ id: 'campaignEditor.searchForm.header' })),

      _react2.default.createElement('div', { className: 'row' },
        _react2.default.createElement('div', { className: 'col-md-8' },
          _react2.default.createElement(_reduxForm.Field, {
            label: intl.formatMessage({ id: 'campaignEditor.searchForm.campaignId.label' }),
            name: 'campaignId',
            component: renderTextInput }),

          _react2.default.createElement(_ReduxFormDateRange2.default, {
            fromFieldName: 'startsOn',
            toFieldName: 'endsOn',
            label: intl.formatMessage({ id: 'campaignEditor.searchForm.endsStartsOn.label' }) }),

          _react2.default.createElement(_reduxForm.Field, {
            label: intl.formatMessage({ id: 'campaignEditor.searchForm.status.label' }),
            name: 'status',
            component: renderTextInput }),

          _react2.default.createElement(_reduxForm.Field, {
            label: intl.formatMessage({ id: 'campaignEditor.searchForm.campaignType.label' }),
            name: 'campaignType',
            component: renderTextInput }),

          _react2.default.createElement(_reduxForm.Field, {
            label: intl.formatMessage({ id: 'campaignEditor.searchForm.owner.label' }),
            name: 'owner',
            component: renderTextInput }))),



      renderActionToolbar(),
      _react2.default.createElement('hr', null)));


};

CampaignSearchForm.propTypes = {
  onSearch: _react.PropTypes.func.isRequired,
  onCreate: _react.PropTypes.func.isRequired,
  reset: _react.PropTypes.func.isRequired,
  intl: _reactIntl.intlShape.isRequired };


CampaignSearchForm.contextTypes = {
  locale: _react2.default.PropTypes.string.isRequired,
  formatPatterns: _react2.default.PropTypes.object.isRequired };exports.default =


(0, _reduxForm.reduxForm)({
  form: _forms.SEARCH_CAMPAIGN_FORM })(
(0, _reactIntl.injectIntl)(CampaignSearchForm));