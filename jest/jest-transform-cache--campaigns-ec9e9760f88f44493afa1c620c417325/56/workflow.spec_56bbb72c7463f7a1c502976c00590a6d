'use strict';var assert = require('chai').assert;
var expect = require('chai').expect;
var _ = require('lodash');
var should = require('should');
var nodemailer = require('nodemailer-mock');

var transport = nodemailer.createTransport();

describe('Testing nodemailer-mock...', function () {
  beforeEach(function () {
    // Reset the mock to default values after each test
    nodemailer.mock.reset();
  });

  it('should succeed for email sending', function (done) {
    // Send an email that should succeed
    transport.sendMail('Email', function (err, info) {
      should(err).equal(null);
      info.response.should.equal('nodemailer-mock success');
      done();
    });
  });

  it('should have the sent email available in the mock.sentMail()', function (done) {
    // Look for this value in the sentmail cache
    var email = 'Check for this value';
    // Send an email that should succeed
    transport.sendMail(email, function (err, info) {
      should(err).equal(null);
      info.response.should.equal('nodemailer-mock success');
      // Check that our email was put into the sentMail cache
      var sentMail = nodemailer.mock.sentMail();
      should(sentMail).not.be.empty();
      sentMail.length.should.equal(1);
      sentMail[0].should.equal(email);
      done();
    });
  });

  it('should fail once then succeed for email sending', function (done) {
    // Tell the mock to fail once then succeed
    // (for testing retries, or so you dont have to reset a test)
    nodemailer.mock.shouldFailOnce();

    // Send an email that should fail
    transport.sendMail('Email', function (err1, info1) {
      should(err1).equal('nodemailer-mock failure');
      info1.response.should.equal('nodemailer-mock failure');

      // Send an email that should succeed
      transport.sendMail('Email', function (err2, info2) {
        should(err2).equal(null);
        info2.response.should.equal('nodemailer-mock success');
        done();
      });
    });
  });

  it('should fail more than once if not reset', function (done) {
    // tell the mock to fail when sending until we tell it to succeed
    nodemailer.mock.shouldFail(true);

    // Send an email that should fail
    transport.sendMail('Email 1', function (err1, info1) {
      should(err1).equal('nodemailer-mock failure');
      info1.response.should.equal('nodemailer-mock failure');

      // Send another email that should fail
      transport.sendMail('Email 2', function (err2, info2) {
        should(err2).equal('nodemailer-mock failure');
        info2.response.should.equal('nodemailer-mock failure');

        // tell the mock to succeed when sending
        nodemailer.mock.shouldFail(false);

        // Send an email that should succeed
        transport.sendMail('Email 3', function (err3, info3) {
          should(err3).equal(null);
          info3.response.should.equal('nodemailer-mock success');
          done();
        });
      });
    });
  });

  it('should have a custom success message', function (done) {
    // This is the success message we want it to return
    var customSuccess = 'This is a custom success';
    nodemailer.mock.successResponse(customSuccess);

    // Send an email that should succeed
    transport.sendMail('Email', function (err, info) {
      should(err).equal(null);
      info.response.should.equal(customSuccess);
      done();
    });
  });

  it('should have a custom error message', function (done) {
    // This is the error message we want it to return
    var customError = 'This is a custom error';
    nodemailer.mock.failResponse(customError);

    // Tell the mock to fail once then succeed
    // (for testing retries, or so you dont have to reset a test)
    nodemailer.mock.shouldFailOnce();

    // Send an email that should fail
    transport.sendMail('Email', function (err, info) {
      should(err).equal(customError);
      info.response.should.equal(customError);
      done();
    });
  });

  it('should return verify success using the mocked nodemailer transport', function (done) {
    transport.verify(function (err, success) {
      should(err).equal(null);
      success.should.equal('nodemailer-mock success');
      done();
    });
  });

  it('should return verify failure using the mocked nodemailer transport', function (done) {
    nodemailer.mock.shouldFailOnce();
    transport.verify(function (err) {
      should(err).not.equal(null);
      err.should.be.exactly('nodemailer-mock failure');
      done();
    });
  });

  it('should return verify error using the real nodemailer transport', function (done) {
    nodemailer.mock.mockedVerify(false);
    transport.verify(function (err) {
      should(err).not.equal(null);
      err.code.should.equal('ECONNECTION');
      err.command.should.equal('CONN');
      done();
    });
  });
});