'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.






startCampaign = startCampaign;var _superagentBluebirdPromise = require('superagent-bluebird-promise');var _superagentBluebirdPromise2 = _interopRequireDefault(_superagentBluebirdPromise);var _bluebird = require('bluebird');var _bluebird2 = _interopRequireDefault(_bluebird);var _campaigns = require('../../constants/campaigns');var _notification = require('../notification');var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function startCampaign(campaignId) {
  return function (dispatch, getState) {
    return _bluebird2.default.resolve(
    dispatch({
      type: _campaigns.CAMPAIGN_STARTING_START })).

    then(function () {
      return _superagentBluebirdPromise2.default.put(
      _lodash2.default.find(getState().serviceRegistry, {
        currentApplication: true }).
      location + '/api/campaigns/start/' + campaignId).
      set('Accept', 'application/json').then(function (response) {
        var campaign = response.body;
        return _bluebird2.default.resolve(
        dispatch((0, _notification.showNotification)('campaign.message.success.start', 'success'))).
        then(function () {
          dispatch({
            type: _campaigns.CAMPAIGN_STARTING_SUCCESS,
            campaign: campaign });

        });
      }).catch(function (response) {
        return _bluebird2.default.resolve(
        dispatch((0, _notification.showNotification)('campaign.message.error.start', 'error', 10))).
        then(function () {
          dispatch({
            type: _campaigns.CAMPAIGN_STARTING_ERROR,
            error: response.body });

        });
      }).finally(function () {
        // removing all notifications or they will be left in 'notification queue'
        dispatch((0, _notification.removeNotification)());
      });
    });
  };
} //import { CAMPAIGN_SERVICE_NAME } from '../../constants/services'