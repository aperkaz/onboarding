'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};exports.default =

























campaignList;var _campaigns = require('../constants/campaigns');var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**
                                                                                                                                                                                                                                              * After getting data from the server side dates are in iso format (2016-11-16T11:11:48.000Z)
                                                                                                                                                                                                                                              * we need to convert them into Date objects
                                                                                                                                                                                                                                              * @param isoDate string
                                                                                                                                                                                                                                              * @returns Date/undefined
                                                                                                                                                                                                                                              */var transformISODateToDate = function transformISODateToDate(isoDate) {if (!_lodash2.default.isNull(isoDate) && !_lodash2.default.isUndefined(isoDate)) {return new Date(isoDate);}return undefined;}; // State of Campaign reducer:
// {
//     campaigns: [],
//     error: {},
//     loading: true / false
// }
function campaignList() {var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var action = arguments[1];switch (action.type) {case _campaigns.CAMPAIGN_FIND_START:return _extends({}, state, { loading: true });case _campaigns.CAMPAIGN_FIND_SUCCESS:var formattedCampaign = _extends({}, action.campaign, { startsOn: transformISODateToDate(action.campaign.startsOn), endsOn: transformISODateToDate(action.campaign.endsOn) });

      return _extends({},
      state, {
        loading: false,
        campaigns: _lodash2.default.concat(state.campaigns, formattedCampaign) });

    case _campaigns.CAMPAIGN_FIND_ERROR:
      return _extends({},
      state, {
        loading: false,
        error: action.error });

    case _campaigns.CAMPAIGNS_LOAD_START:
      return _extends({},
      state, {
        loading: true });

    case _campaigns.CAMPAIGNS_LOAD_SUCCESS:
      return _extends({},
      state, {
        loading: false,
        campaigns: _lodash2.default.map(action.campaigns, function (cmp) {
          return _extends({},
          cmp, {
            startsOn: transformISODateToDate(cmp.startsOn),
            endsOn: transformISODateToDate(cmp.endsOn) });

        }) });

    case _campaigns.CAMPAIGNS_LOAD_ERROR:
      return _extends({},
      state, {
        loading: false,
        error: action.error });

    case _campaigns.CAMPAIGN_CREATE_SUCCESS:
      return _extends({},
      state, {
        campaigns: _lodash2.default.concat(state.campaigns, action.newCampaign) });

    case _campaigns.CAMPAIGN_DELETE_SUCCESS:
      return _extends({},
      state, {
        campaigns: _lodash2.default.reject(state.campaigns, { campaignId: action.campaignId }) });

    case _campaigns.CAMPAIGN_DELETE_ERROR:
      return _extends({},
      state, {
        error: action.error });

    case _campaigns.CAMPAIGN_STARTING_SUCCESS:
      var campaigns = _lodash2.default.map(state.campaigns, function (campaign) {
        if (campaign.campaignId === action.campaign.campaignId) return campaign = action.campaign;else
        return campaign;
      });
      return _extends({},
      state, {
        campaigns: campaigns });

    case _campaigns.CONTACT_LOAD_SUCCESS:
      return _extends({},
      state, {
        onboardingCampaignContact: { contact: action.campaignContact.contact, campaign: action.campaignContact.campaign } });

    default:
      return state;}

}