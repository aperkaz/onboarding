'use strict';var _update = require('../../../client/actions/campaignContacts/update');var actions = _interopRequireWildcard(_update);
var _campaignContacts = require('../../../client/constants/campaignContacts');




var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);
var _reduxMockStore = require('redux-mock-store');var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);
var _reduxThunk = require('redux-thunk');var _reduxThunk2 = _interopRequireDefault(_reduxThunk);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}
var middlewares = [_reduxThunk2.default];
var mockStore = (0, _reduxMockStore2.default)(middlewares);

var mockResponse = function mockResponse(status, statusText, response) {
  return new window.Response(response, {
    status: status,
    statusText: statusText,
    headers: {
      'Content-type': 'application/json' } });


};

it('calls request and success actions if the fetch response was successful', function () {
  var store = mockStore({
    serviceRegistry: [{
      currentApplication: true,
      location: "127.0.0.1:8080/campaigns",
      name: "campaigns" }] });


  window.fetch = jest.fn().mockImplementation(function () {return (
      Promise.resolve(mockResponse(200, null, '{"campaignId":"ff"}')));});

  return store.dispatch(actions.updateContact('ff', 'karan@cronj.com')).
  then(function () {
    var expectedActions = store.getActions();
    expect(expectedActions.length).toBe(4);
    expect(expectedActions[0]).toEqual({ type: _campaignContacts.CAMPAIGN_CONTACT_UPDATE_START });
    expect(expectedActions[1].type).toEqual('SHOW_NOTIFICATION');
    expect(expectedActions[3]).toEqual({ type: 'REMOVE_NOTIFICATION' });
  });
});