'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.
























shallowWithIntl = shallowWithIntl;exports.








mountWithIntl = mountWithIntl;var _react = require('react');var _react2 = _interopRequireDefault(_react);var _reactIntl = require('react-intl');var _enzyme = require('enzyme');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // You can pass your messages to the IntlProvider. Optional: remove if unneeded.
var messages = require('../../client/i18n/en'); // en.json
// Create the IntlProvider to retrieve context for wrapping around.
/**
 * Components using the react-intl module require access to the intl context.
 * This is not available when mounting single components in Enzyme.
 * These helper functions aim to address that and wrap a valid,
 * English-locale intl context around them.
 */var intlProvider = new _reactIntl.IntlProvider({ locale: 'en', messages: messages }, {});var _intlProvider$getChil = intlProvider.getChildContext(),intl = _intlProvider$getChil.intl; /**
                                                                                                                                                                                           * When using React-Intl `injectIntl` on components, props.intl is required.
                                                                                                                                                                                           */function nodeWithIntlProp(node) {return _react2.default.cloneElement(node, { intl: intl });}function shallowWithIntl(node, _ref) {var context = _ref.context;return (0, _enzyme.shallow)(nodeWithIntlProp(node), { context: Object.assign({}, context, { intl: intl }) });}function mountWithIntl(node, _ref2) {var context = _ref2.context,childContextTypes = _ref2.childContextTypes;return (0, _enzyme.mount)(nodeWithIntlProp(node), { context: Object.assign({}, context, { intl: intl }), childContextTypes: Object.assign({}, { intl: _reactIntl.intlShape }, childContextTypes) });}